<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net9.0-android;net9.0-ios</TargetFrameworks>
		<TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net9.0-windows10.0.19041.0</TargetFrameworks>
		<!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->
		<!-- <TargetFrameworks>$(TargetFrameworks);net9.0-tizen</TargetFrameworks> -->
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>

		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">24.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>

    <PackageOutputPath>C:\Users\logik\Dropbox\Nugets</PackageOutputPath>
    <!-- Set export directory -->
  </PropertyGroup>

  <!-- Linker configuration to prevent code stripping in Release mode -->
  <PropertyGroup Condition="'$(TargetFramework)' == 'net9.0-android'">
    <PublishTrimmed>false</PublishTrimmed>
    <EnableLLVM>true</EnableLLVM>
  </PropertyGroup>

  <PropertyGroup>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>MarketAlly.ViewEngine</PackageId>
    <Version>2.1.2</Version>
    <Authors>David H Friedel Jr</Authors>
    <Company>MarketAlly</Company>
    <Product>MarketAlly.Maui.ViewEngine</Product>

    <Title>Advanced .NET MAUI Browser with Inline PDF Viewing and Custom Navigation</Title>
    <Description>
      Enhanced .NET MAUI browser control with advanced capabilities including seamless inline PDF viewing, custom navigation history with titles and favicons, real-time content monitoring, and intelligent web scraping. Features include hybrid WebView+PdfView architecture, custom navigation history management, favicon extraction, PDF text extraction, custom user-agent configuration, debounced DOM change detection, on-demand link extraction, ad detection, cookie management, and seamless cross-platform support for Android, iOS, and Windows.

      Key Features:
      - NEW BrowserView control: Hybrid WebView+PdfView with seamless switching (v2.0.0)
      - NEW Inline PDF viewing: Automatically displays PDFs without external apps (v2.0.0)
      - NEW Custom navigation history: Full history with titles, URLs, timestamps, and favicons (v2.0.0)
      - NEW History management: GoBack, GoForward, NavigateToItem with searchable history (v2.0.0)
      - NEW History persistence: Export/Import navigation history as JSON (v2.0.0)
      - NEW Favicon extraction: Automatic favicon detection and extraction (v2.0.0)
      - Embedded PDF renderer: No external dependencies, pure .NET MAUI implementation (v2.0.0)
      - Custom User-Agent and browser detection bypass
      - Real-time content monitoring with intelligent debouncing (1-second delay)
      - On-demand route extraction - Zero performance impact by default
      - Automatic PDF download handling and text extraction
      - Intelligent ad detection and filtering with scoring system
      - Link extraction with Routes (all page links) and BodyRoutes (content-only links)
      - Configurable route limits (MaxRoutes) for performance optimization
      - Full cookie and storage support
      - WebRTC and WebGL compatibility
      - Cross-platform implementation (Android, iOS, Windows)
      - Event-based content updates via PageDataChanged event
      - JavaScript injection support
      - Production-ready with optimized performance

      Perfect for applications requiring advanced web browsing, PDF viewing, navigation management, content interaction, monitoring, and processing.
    </Description>

    <Copyright>Copyright ¬© 2025 MarketAlly</Copyright>
    <PackageIcon>icon.png</PackageIcon>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/MarketAlly/MarketAlly.ViewEngine</PackageProjectUrl>
    <RepositoryUrl>https://github.com/MarketAlly/MarketAlly.ViewEngine</RepositoryUrl>
    <RepositoryType>git</RepositoryType>

    <PackageTags>webview dotnet-maui maui custom-control browser pdf-viewer pdf-handling inline-pdf navigation-history history-management favicon content-monitoring dom-monitoring user-agent cookie-management webrtc webgl android ios windows cross-platform web-scraping content-extraction debouncing link-extraction ad-detection on-demand performance-optimization browserview hybrid-control</PackageTags>

    <PackageReleaseNotes>
      Version 2.0.0 (MAJOR UPDATE - Inline PDF Viewing and Custom Navigation History):

      üéâ NEW FEATURES:
      - MAJOR: BrowserView control - Hybrid WebView+PdfView that seamlessly switches between web and PDF content
      - MAJOR: Inline PDF viewing - Automatically displays PDFs within the control without external apps
      - MAJOR: Custom navigation history - Full navigation management with titles, URLs, timestamps, and favicons
      - MAJOR: Navigation methods - GoBackInHistoryAsync, GoForwardInHistoryAsync, NavigateToHistoryItemAsync
      - MAJOR: History persistence - ExportHistoryJson/ImportHistoryJson for saving/restoring browsing sessions
      - MAJOR: Favicon extraction - Automatic detection and extraction of website favicons (with fallback to favicon.ico)
      - MAJOR: History search - SearchHistory method for finding pages by title or URL
      - NEW: Embedded PDF renderer - No external dependencies, integrated Vitvov.Maui.PDFView source
      - NEW: NavigationHistory ObservableCollection - Real-time bindable history for UI
      - NEW: CanGoBackInHistory and CanGoForwardInHistory properties for UI button states
      - NEW: NavigatingToHistoryItem event for tracking navigation actions
      - NEW: ShowInlinePdf property to control PDF display behavior

      üîß IMPROVEMENTS:
      - Navigation history completely replaces built-in MAUI WebView navigation (no more limited history)
      - Smart duplicate detection prevents consecutive identical entries in history
      - Configurable MaxHistoryItems to control memory usage
      - PDF content is cached for faster re-navigation
      - FaviconUrl now included in PageData for all page loads
      - History items include thumbnails when EnableThumbnailCapture is true

      üì¶ ARCHITECTURE:
      - BrowserView is the new recommended control (WebView still available for backward compatibility)
      - Internal PdfView component for seamless PDF rendering
      - Unified event model - PageDataChanged works for both web and PDF content
      - Clean separation between web and PDF modes with automatic switching

      ‚ö†Ô∏è BREAKING CHANGES:
      - None! Existing WebView code continues to work
      - New BrowserView control is opt-in
      - Recommended migration: Replace WebView with BrowserView for enhanced features

      üîÑ MIGRATION GUIDE:
      Old: &lt;marketally:WebView x:Name="webView" /&gt;
      New: &lt;marketally:BrowserView x:Name="browserView" /&gt;

      All existing properties and methods are supported!

      Previous versions:
      - 1.2.7: Critical Release mode XAML initialization fix
      - 1.2.6: Async void fixes, ProGuard configuration, PixelCopy API
      - 1.1.4: URL normalization and domain exclusion
      - 1.1.0-1.1.3: Performance optimization, route extraction, ad detection
    </PackageReleaseNotes>

    <!-- Required dependencies -->
    <DependencyGroup>
      <Dependency Id="Microsoft.Maui.Controls" Version="9.0.40" />
      <Dependency Id="itext7" Version="9.1.0" />
    </DependencyGroup>
  </PropertyGroup>

  <ItemGroup>
    <MauiIcon Include="icon.png" />
  </ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Maui.Controls" Version="9.0.40" />
    <PackageReference Include="itext7" Version="9.1.0" />
	</ItemGroup>

	<!-- Android-specific resources for PDF viewer -->
	<ItemGroup Condition="'$(TargetFramework)' == 'net9.0-android'">
		<AndroidResource Include="Platforms\Android\PdfView\Resources\layout\card_view.xml" />
	</ItemGroup>

	<ItemGroup>
    <None Include="icon.png">
      <Pack>true</Pack>
      <PackagePath>\</PackagePath>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Visible>true</Visible>
    </None>
    <!-- Configure README -->
    <None Include="README.md" Pack="true" PackagePath="\" />

    <!-- Include ProGuard rules for Android to prevent linker from stripping WebView code -->
    <ProguardConfiguration Include="Platforms\Android\proguard.cfg" />
    <None Include="Platforms\Android\proguard.cfg">
      <Pack>true</Pack>
      <PackagePath>buildTransitive\proguard.cfg</PackagePath>
    </None>

    <!-- Include .targets file to automatically configure consuming apps -->
    <None Include="MarketAlly.Maui.ViewEngine.targets">
      <Pack>true</Pack>
      <PackagePath>build\MarketAlly.Maui.ViewEngine.targets;buildTransitive\MarketAlly.Maui.ViewEngine.targets</PackagePath>
    </None>
	</ItemGroup>

</Project>
